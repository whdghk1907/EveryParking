<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.everyparking.user.api.main.dao.MainDao">


	<!-- // 3/16 장문 지도 작업 부분 -->

 	<select id="selectParkingInfoList" parameterType="hashMap" resultType="hashMap">
 		/* MainMapper.selectMarkerList [ 주차장 정보 조회 - 김장문 ] */
		SELECT pp.PARK_SEQ,
				pp.USER_SEQ,
				pp.FILE_SEQ,
				pp.PARK_NAME,
				pp.PARK_ADDR1,
				pp.PARK_ADDR2,
				pp.PARK_ADDR_X,
				pp.PARK_ADDR_Y,
				pp.PARK_CALL_NUM,
				pp.PARK_CONT,
				pp.PARK_OPEN,
				pp.PARK_CLOSE,
				pp.PARK_PRICE,
				pp.REG_SEQ,
				pp.REG_DATE,
				pp.MOD_SEQ,
				pp.MOD_DATE,
				pp.NOTE,
				pp.USE_YN,
				pf.FILE_URL,
				pf.FILE_CONV_NAME
		FROM p_parkinginfo pp, p_file pf
		WHERE 1=1
		AND pp.FILE_SEQ = pf.FILE_SEQ
		AND pp.PARK_ADDR_X BETWEEN #{x1} AND #{x2}
		AND pp.PARK_ADDR_Y BETWEEN #{y1} AND #{y2}
		AND pp.USE_YN = 'Y'
  	</select>
 

	<select id="selectParkingInfoListCount" parameterType="hashMap" resultType="int">
		/* MainMapper.selectMarkerListCount [ 마커 좌표 개수 조회 - 김장문 ] */
		SELECT COUNT(*)
		FROM p_parkinginfo
		WHERE 1=1
		AND PARK_ADDR_X BETWEEN #{x1} AND #{x2}
		AND PARK_ADDR_Y BETWEEN #{y1} AND #{y2}
		AND USE_YN = 'Y'
	</select>

	
	<select id="selectOneParkingInfo" parameterType="hashMap" resultType="hashMap">
		/* MainMapper.selectOneParkingInfo [ 주차장 개별 정보 조회 - 김장문 ] */
		SELECT pp.PARK_SEQ
			, pp.USER_SEQ
			, pp.FILE_SEQ
			, pp.PARK_NAME
			, pp.PARK_ADDR1
			, pp.PARK_ADDR2
			, pp.PARK_ADDR_X
			, pp.PARK_ADDR_Y
			, pp.PARK_CALL_NUM
			, pp.PARK_CONT
			, pp.PARK_OPEN
			, pp.PARK_CLOSE
			, pp.PARK_PRICE
			, pp.REG_SEQ
			, pp.REG_DATE
			, pp.MOD_SEQ
			, pp.MOD_DATE
			, pp.NOTE
			, pp.USE_YN
			, pf.FILE_URL
			, pf.FILE_CONV_NAME
		FROM p_parkinginfo pp , p_file pf
		WHERE 1=1
		AND pp.FILE_SEQ = pf.FILE_SEQ
		AND pp.USE_YN = 'Y'
		<if test='PARK_SEQ!=null and !PARK_SEQ.equals("")'>
			AND pp.PARK_SEQ = #{PARK_SEQ}
		</if>
	</select>


	<select id="selectSectionList" parameterType="hashMap" resultType="hashMap">
		/* MainMapper.selectOneSection [ 주차장 개별 우대사항 정보의 조회 - 김장문 ] */
		SELECT pc.SEC_SEQ
			, pc.SEC_TYPE
			, pc.PARK_SEQ
			, pc.SEC_COUNT
			, pc.SEC_DIS
			, pc.REG_SEQ
			, pc.REG_DATE
			, pc.MOD_SEQ
			, pc.MOD_DATE
			, pc.NOTE
			, ps.SUB_CODE
			, ps.SUB_NAME
		FROM p_section pc, p_subcode ps
		WHERE 1=1
		AND pc.SEC_TYPE = ps.SUB_CODE
		AND pc.USE_YN = 'Y'
		<if test='PARK_SEQ!=null and !PARK_SEQ.equals("")'>
			AND pc.PARK_SEQ = #{PARK_SEQ}
		</if>
	</select>


	<select id="selectReviewList" parameterType="hashMap" resultType="hashMap">
		/* MainMapper.selectOneReview [ 주차장 개별의 리뷰 조회 - 김장문 ] */
		SELECT pr.REV_SEQ
			, pr.RESE_SEQ
			, pr.REV_STAR
			, pr.REV_CONT
			, pr.REG_SEQ
			, pr.REG_DATE
			, pr.MOD_SEQ
			, pr.MOD_DATE
			, pr.USE_YN
			, pu.USER_NAME
		FROM p_review pr, p_reservation pv, p_section ps, p_user pu
		WHERE pr.RESE_SEQ = pv.RESE_SEQ
		AND pv.SEC_SEQ = ps.SEC_SEQ
		AND pv.USER_SEQ = pu.USER_SEQ
		AND pr.USE_YN = 'Y'
		<if test='PARK_SEQ!=null and !PARK_SEQ.equals("")'>
			AND ps.PARK_SEQ = #{PARK_SEQ}
		</if>
	</select>
	
	
	<select id="selectReviewListCount" parameterType="hashMap" resultType="int">
		/* MainMapper.selectReviewListCount [ 주차장 개별의 리뷰 카운트 조회 - 김장문 ] */
		SELECT COUNT(*)
		FROM p_review pr, p_reservation pv, p_section ps
		WHERE pr.RESE_SEQ = pv.RESE_SEQ
		AND pv.SEC_SEQ = ps.SEC_SEQ
		AND pr.USE_YN = 'Y'
		<if test='PARK_SEQ!=null and !PARK_SEQ.equals("")'>
			AND ps.PARK_SEQ = #{PARK_SEQ}
		</if>
	</select>
	
	
	<select id="selectSectionInfoForRese" parameterType="hashMap" resultType="hashMap">
	/* MainMapper.selectSectionInfoForRese [ 주차장의 선택 시간에 대한 남은 주차 대수 조회 - 김장문 ] */
		SELECT ps.SEC_SEQ  , ps.SEC_TYPE , ps.SEC_DIS , ps.SEC_COUNT - IFNULL((
			SELECT t3.blockorrese 
			FROM (
				SELECT t2.sec_seq , MAX(t2.regcnt) as blockorrese from(
					SELECT t1.* , (
						SELECT SUM(inn1.cnt) FROM (
							SELECT ps.SEC_SEQ as sec_seq , STR_TO_DATE(CONCAT(LEFT(#{daterange}, 13), ':00:01'), '%Y-%m-%d %T') as stime , STR_TO_DATE((substring(#{daterange}, 18, 13)), '%Y-%m-%d %T') as etime , 0 as cnt from p_section ps where ps.PARK_SEQ = #{PARK_SEQ} 
							UNION ALL
							SELECT pr.SEC_SEQ as sec_seq , GREATEST(pr.RESE_START, STR_TO_DATE(CONCAT(LEFT(#{daterange}, 13), ':00:01'), '%Y-%m-%d %T')) as stime , pr.RESE_END as etime , 1 as cnt
							FROM p_reservation pr 
							WHERE 1=1
							AND pr.SEC_SEQ IN (select ps.SEC_SEQ from p_section ps where ps.PARK_SEQ = #{PARK_SEQ})
							AND ((pr.RESE_START between STR_TO_DATE(CONCAT(LEFT(#{daterange}, 13), ':00:01'), '%Y-%m-%d %T') and STR_TO_DATE((substring(#{daterange}, 18, 13)), '%Y-%m-%d %T'))
							OR (pr.RESE_END between STR_TO_DATE(CONCAT(LEFT(#{daterange}, 13), ':00:01'), '%Y-%m-%d %T') and STR_TO_DATE((substring(#{daterange}, 18, 13)), '%Y-%m-%d %T')))
							UNION ALL
							SELECT pb.SEC_SEQ as sec_seq , GREATEST(pb.BLO_START, STR_TO_DATE(CONCAT(LEFT(#{daterange}, 13), ':00:01'), '%Y-%m-%d %T')) as stime , pb.BLO_END as etime , 1 as cnt
							FROM p_block pb 
							WHERE 1=1
							AND pb.SEC_SEQ IN (select ps.SEC_SEQ from p_section ps where ps.PARK_SEQ = #{PARK_SEQ})
							AND ((pb.BLO_START between STR_TO_DATE(CONCAT(LEFT(#{daterange}, 13), ':00:01'), '%Y-%m-%d %T') AND STR_TO_DATE((substring(#{daterange}, 18, 13)), '%Y-%m-%d %T'))
							OR (pb.BLO_END between STR_TO_DATE(CONCAT(LEFT(#{daterange}, 13), ':00:01'), '%Y-%m-%d %T') AND STR_TO_DATE((substring(#{daterange}, 18, 13)), '%Y-%m-%d %T')))
						) inn1
						WHERE inn1.sec_seq = t1.sec_seq
						AND t1.stime between inn1.stime and inn1.etime 
					) as regcnt 
					from (
						select ps.SEC_SEQ as sec_seq , STR_TO_DATE(CONCAT(LEFT(#{daterange}, 13), ':00:01'), '%Y-%m-%d %T') as stime , STR_TO_DATE((substring(#{daterange}, 18, 13)), '%Y-%m-%d %T') as etime , 0 as cnt from p_section ps where ps.PARK_SEQ = #{PARK_SEQ} 
						union all
						select pr.SEC_SEQ as sec_seq , GREATEST(pr.RESE_START, STR_TO_DATE(CONCAT(LEFT(#{daterange}, 13), ':00:01'), '%Y-%m-%d %T')) as stime , pr.RESE_END as etime , 1 as cnt
						from p_reservation pr 
						where 1=1
						and pr.SEC_SEQ IN (select ps.SEC_SEQ from p_section ps where ps.PARK_SEQ = #{PARK_SEQ})
						and ((pr.RESE_START between STR_TO_DATE(CONCAT(LEFT(#{daterange}, 13), ':00:01'), '%Y-%m-%d %T') and STR_TO_DATE((substring(#{daterange}, 18, 13)), '%Y-%m-%d %T'))
						or (pr.RESE_END between STR_TO_DATE(CONCAT(LEFT(#{daterange}, 13), ':00:01'), '%Y-%m-%d %T') and STR_TO_DATE((substring(#{daterange}, 18, 13)), '%Y-%m-%d %T')))
						union all
						select pb.SEC_SEQ as sec_seq , GREATEST(pb.BLO_START, STR_TO_DATE(CONCAT(LEFT(#{daterange}, 13), ':00:01'), '%Y-%m-%d %T')) as stime , pb.BLO_END as etime , 1 as cnt
						from p_block pb 
						where 1=1
						and pb.SEC_SEQ IN (select ps.SEC_SEQ from p_section ps where ps.PARK_SEQ = #{PARK_SEQ})
						and ((pb.BLO_START between STR_TO_DATE(CONCAT(LEFT(#{daterange}, 13), ':00:01'), '%Y-%m-%d %T') and STR_TO_DATE((substring(#{daterange}, 18, 13)), '%Y-%m-%d %T'))
						or (pb.BLO_END between STR_TO_DATE(CONCAT(LEFT(#{daterange}, 13), ':00:01'), '%Y-%m-%d %T') and STR_TO_DATE((substring(#{daterange}, 18, 13)), '%Y-%m-%d %T')))
					) t1
				) t2
				group by t2.sec_seq
			) t3
			where t3.sec_seq = ps.SEC_SEQ
		), 0) as remaincnt
		from p_section ps 
		where ps.PARK_SEQ = #{PARK_SEQ}
		and ps.SEC_TYPE IN (SELECT RU_TYPE AS SEC_TYPE FROM p_royaluser WHERE USER_SEQ = #{USER_SEQ})
	</select>
	
	
	<insert id="insertReservation" parameterType="hashMap">
		/* MainDao.insertReservation [ 예약하기 DB insert 작업 - 김장문 ] */
		INSERT INTO p_reservation( SEC_SEQ
								, USER_SEQ
								, RESE_CALL_NUM
								, RESE_CAR_NO
								, RESE_PRICE
								, RESE_START
								, RESE_END
								, RESE_TID
								, REG_DATE
								  )
						VALUES ( #{SEC_SEQ}
								, #{USER_SEQ}
								, #{RESE_CALL_NUM}
								, #{RESE_CAR_NO}
								, #{RESE_PRICE}
								, DATE_FORMAT(#{RESE_START}, '%Y-%m-%d %T')
								, DATE_FORMAT(#{RESE_END}, '%Y-%m-%d %T')
								, #{RESE_TID}
								, SYSDATE()
								  )
	</insert>


	<update id="deleteReservation" parameterType="hashMap">
		UPDATE p_reservation SET
		RESE_STATE = 'PM02'
		WHERE RESE_SEQ = #{RESE_SEQ}
	</update>
	
	
	<select id="getUserInfo" parameterType="hashMap" resultType="hashMap">
		SELECT pu.USER_SEQ 
			, pu.USER_TYPE 
			, pu.USER_CAR_NO 
			, pu.USE_YN 
			, pr.RU_TYPE
			, ps.SUB_CODE 
			, ps.SUB_NAME 
		FROM p_user pu, p_royaluser pr, p_subcode ps 
		WHERE 1=1
		AND pu.USER_SEQ = pr.USER_SEQ 
		AND pr.RU_TYPE = ps.SUB_CODE
		AND pr.USE_YN = 'Y'
		AND pu.USER_SEQ = #{USER_SEQ}
	</select>
	
	
	<select id="checkLogin" parameterType="hashMap" resultType="hashMap">
		SELECT *
		FROM p_user
		WHERE USER_SEQ = {USER_SEQ}
	</select>
	
	
	<select id="getUserPublishCoupon" resultType="hashMap">
		SELECT pp.PUB_SEQ ,pp.USER_SEQ ,pc.COU_NAME, pc.COU_PRICE
		FROM p_coupon pc ,p_publishcoupon pp ,p_user pu 
		WHERE 1=1
		AND pc.COU_SEQ = pp.COU_SEQ 
		AND pp.USER_SEQ = pu.USER_SEQ  
		AND pp.PUB_USE_YN = 'N'
		AND pp.USER_SEQ = #{USER_SEQ}
	</select>
	
	<update id="updateUserCoupon">
		UPDATE p_publishcoupon 
		SET PUB_USE_YN = 'Y'
		WHERE PUB_SEQ = #{PUB_SEQ}
	</update>
	

</mapper>